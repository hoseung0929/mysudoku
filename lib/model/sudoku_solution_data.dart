/// 스도쿠 게임의 정답 데이터를 저장하는 클래스
class SudokuSolutionData {
  /// 레벨별 정답 데이터
  static final Map<int, List<List<int>>> solutions = {
    1: [
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
    ],
    2: [
      [1, 2, 3, 4, 5, 6, 7, 8, 9],
      [4, 5, 6, 7, 8, 9, 1, 2, 3],
      [7, 8, 9, 1, 2, 3, 4, 5, 6],
      [2, 3, 4, 5, 6, 7, 8, 9, 1],
      [5, 6, 7, 8, 9, 1, 2, 3, 4],
      [8, 9, 1, 2, 3, 4, 5, 6, 7],
      [3, 4, 5, 6, 7, 8, 9, 1, 2],
      [6, 7, 8, 9, 1, 2, 3, 4, 5],
      [9, 1, 2, 3, 4, 5, 6, 7, 8],
    ],
    3: [
      [9, 8, 7, 6, 5, 4, 3, 2, 1],
      [6, 5, 4, 3, 2, 1, 9, 8, 7],
      [3, 2, 1, 9, 8, 7, 6, 5, 4],
      [8, 7, 6, 5, 4, 3, 2, 1, 9],
      [5, 4, 3, 2, 1, 9, 8, 7, 6],
      [2, 1, 9, 8, 7, 6, 5, 4, 3],
      [7, 6, 5, 4, 3, 2, 1, 9, 8],
      [4, 3, 2, 1, 9, 8, 7, 6, 5],
      [1, 9, 8, 7, 6, 5, 4, 3, 2],
    ],
    4: [
      [2, 4, 6, 8, 1, 3, 5, 7, 9],
      [5, 7, 9, 2, 4, 6, 8, 1, 3],
      [8, 1, 3, 5, 7, 9, 2, 4, 6],
      [3, 5, 7, 9, 2, 4, 6, 8, 1],
      [6, 8, 1, 3, 5, 7, 9, 2, 4],
      [9, 2, 4, 6, 8, 1, 3, 5, 7],
      [4, 6, 8, 1, 3, 5, 7, 9, 2],
      [7, 9, 2, 4, 6, 8, 1, 3, 5],
      [1, 3, 5, 7, 9, 2, 4, 6, 8],
    ],
    5: [
      [3, 6, 9, 2, 5, 8, 1, 4, 7],
      [2, 5, 8, 1, 4, 7, 3, 6, 9],
      [1, 4, 7, 3, 6, 9, 2, 5, 8],
      [6, 9, 3, 5, 8, 2, 4, 7, 1],
      [5, 8, 2, 4, 7, 1, 6, 9, 3],
      [4, 7, 1, 6, 9, 3, 5, 8, 2],
      [9, 3, 6, 8, 2, 5, 7, 1, 4],
      [8, 2, 5, 7, 1, 4, 9, 3, 6],
      [7, 1, 4, 9, 3, 6, 8, 2, 5],
    ],
    // ... 나머지 레벨의 정답 데이터는 동일한 패턴으로 계속됩니다
  };

  /// 특정 레벨의 정답 데이터를 반환
  static List<List<int>> getSolution(int level) {
    if (solutions.containsKey(level)) {
      return solutions[level]!;
    }

    // 레벨이 5보다 큰 경우, 패턴을 반복하여 생성
    final baseLevel = ((level - 1) % 5) + 1;
    final baseSolution = solutions[baseLevel]!;

    // 행과 열을 회전하여 새로운 정답 생성
    final rotations = (level - 1) ~/ 5;
    return _rotateSolution(baseSolution, rotations);
  }

  /// 정답 데이터를 회전
  static List<List<int>> _rotateSolution(
      List<List<int>> solution, int rotations) {
    if (rotations == 0) return solution;

    final rotated = List.generate(
      9,
      (i) => List.generate(9, (j) => solution[j][8 - i]),
    );

    return _rotateSolution(rotated, rotations - 1);
  }
}
